name: Deploy Django to Server

on:
  push:
    branches: [ master, dev ]

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup SSH access
        uses: webfactory/ssh-agent@v0.5.4
        with:
            ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no root@43.160.207.67 << 'EOF'
          echo "🚀 开始部署: 分支 = ${{ github.ref_name }}"
          
          # 如果没装 git，就先安装
          if ! command -v git &> /dev/null; then
            echo "📦 install git..."
            yum install -y git
          fi
          
          # 添加 GitHub 到 known_hosts（信任 github.com）
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
          BRANCH="${{ github.ref_name }}"
          
          # 按分支设置路径和文件
          if [ "$BRANCH" = "master" ]; then
            PROJECT_DIR="/www/autoDepoly-master"
            COMPOSE_FILE="docker-compose.master.yml"
            ENV_FILE=".env.master"
            ENV_CONTENT='${{ secrets.ENV_MASTER }}'
          elif [ "$BRANCH" = "dev" ]; then
            PROJECT_DIR="/www/autoDepoly-dev"
            COMPOSE_FILE="docker-compose.dev.yml"
            ENV_FILE=".env.dev"
            ENV_CONTENT='${{ secrets.ENV_DEV }}'
          else
            echo "❌ 不支持的分支: $BRANCH"
            exit 1
          fi
          
          # 如果目录不存在, 或者关键 docker-compose 文件不存在，就 clone，否则就进入目录
          if [ ! -d "$PROJECT_DIR" ] || [ ! -f "$PROJECT_DIR/$COMPOSE_FILE" ]; then
            echo "📁 目录不存在或者缺少关键文件，执行 git clone"
            rm -rf $PROJECT_DIR
            git clone --branch $BRANCH git@github.com:hmonster7/autoDepoly.git $PROJECT_DIR
          fi
          cd $PROJECT_DIR
          
          echo "📥 拉取 $BRANCH 最新代码"
          # 拉取最新代码
          # git fetch origin $BRANCH
          # git checkout $BRANCH
          git pull origin $BRANCH
          
          echo "📝 写入环境变量到 $ENV_FILE"
          # 写入 .env 文件（此时目录已存在）
          echo "$ENV_CONTENT" > $ENV_FILE
          
          
          # 检查nginx配置目录和文件是否存在
          NGINX_DIR="/www/nginx-proxy-manager"
          NGINX_COMPOSE="$NGINX_DIR/docker-compose.nginx.yml"
          
          # 仅在目录不存在时创建
          if [ ! -d "$NGINX_DIR" ]; then
            echo "📁 创建nginx配置目录"
            mkdir -p $NGINX_DIR
          fi
          
          # 仅在配置文件不存在时创建
          if [ ! -f "$NGINX_COMPOSE" ]; then
            echo "📝 创建nginx配置文件"
            cat > $NGINX_COMPOSE << 'EOFNGINX'
          version: "3"
          services:
            nginx-proxy-manager:
              container_name: nginx-proxy-manager
              image: 'jc21/nginx-proxy-manager:latest'
              restart: unless-stopped
              ports:
                - '80:80'
                - '81:81'
                - '443:443'
              volumes:
                - ./data:/data
                - ./letsencrypt:/etc/letsencrypt
                - /www/autoDepoly-master/static:/code/static/master
                - /www/autoDepoly-dev/static:/code/static/dev
        
          networks:
            default:
              name: nginx_default
          EOFNGINX
          
            # 确保数据目录存在
            mkdir -p $NGINX_DIR/data
            mkdir -p $NGINX_DIR/letsencrypt
          else
            echo "✅ nginx配置文件已存在，跳过创建"
          fi
          
          echo "🧩 检查 nginx-proxy-manager 是否已运行"
          if [ -z "$(docker ps -q -f name=nginx-proxy-manager)" ]; then
            echo "🔵 nginx-proxy-manager 未运行，启动中..."
            cd $NGINX_DIR
            docker compose -f docker-compose.nginx.yml up -d
            cd $PROJECT_DIR  # 返回项目目录
          else
            echo "🟢 nginx-proxy-manager 已在运行，无需启动"
          fi
          
          
          echo "🛠️ 启动 Docker 服务：$COMPOSE_FILE"
          # 启动 Docker 服务
          docker compose -f $COMPOSE_FILE down
          docker compose -f $COMPOSE_FILE up -d --build
          
          echo "✅ 部署完成：$BRANCH -> $PROJECT_DIR"
          
          EOF